name: Validate Docker Compose on Dev

on:
  push:
    branches:
      - dev

env:
  CHECK_SECRET: ${{ secrets.CHECK_SECRET }}

jobs:
  validate-docker-compose:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if secret is set
        if: env.CHECK_SECRET == 'true'
        run: echo "Secret is set"

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Debug - Check working directory
      - name: List project files
        run: ls -R .

      # Step 4: Create .env file
      - name: Create .env file
        run: |
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env


      # Step 5: Run Docker Compose (up)
      - name: Start Docker Compose
        run: |
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          docker-compose up -d

      # Step 6: Wait for services to start
      - name: Wait for services to start
        run: sleep 20

      # Step 7: Verify Database Connection
      - name: Verify Database Connection
        run: |
          docker-compose exec db sh -c "mysql -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e 'SHOW DATABASES;'"

      # Step 8: Verify adminer service
      - name: Verify Adminer Service
        run: |
          docker-compose exec adminer echo "Adminer service is running"

      # Step 9: Verify backend service
      - name: Verify Backend Service
        run: |
          docker-compose exec backend php artisan test

      # Step 10: Verify frontend service
      - name: Verify Frontend Service
        run: |
          docker-compose exec frontend npm run test

      # Step 11: Clean up services
      - name: Clean up services
        run: docker-compose down --volumes
