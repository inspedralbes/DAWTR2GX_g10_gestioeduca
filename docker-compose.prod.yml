services:
  # Servicio para MySQL
  db:
    image: mysql:8.2.0
    container_name: mysql_prod
    ports:
      - "20003:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: a23adrestmar_tr2_g10
      MYSQL_USER: user
      MYSQL_PASSWORD: user

  # Servicio para Adminer
  adminer:
    image: adminer
    container_name: adminer_prod
    depends_on:
      - db
    ports:
      - "20002:8080"

  # Backend (Laravel)
  backend:
    build:
      context: ./private/backend
      dockerfile: Dockerfile
    container_name: laravel_prod
    volumes:
      - ./private/backend:/var/www/
    working_dir: /var/www/
    depends_on:
      - db
    expose:
      - "20030"
    command: bash -c "
      composer install --no-dev --optimize-autoloader --no-interaction && \
      php artisan key:generate && \
      php artisan migrate --force && \
      php artisan config:cache && \
      php artisan route:cache && \
      php artisan view:cache && \
      php-fpm"

  # Frontend (Vue.js)
  frontend:
    build:
      context: ./public_html
      dockerfile: Dockerfile
    container_name: vue_prod
    volumes:
      - ./public_html:/usr/share/nginx/html
    environment:
      - NODE_ENV=production

  # Servicio para Node.js
  nodejs:
    build:
      context: ./private/node-app
      dockerfile: Dockerfile
    container_name: nodejs_prod
    working_dir: /usr/src/app
    environment:
      - NODE_ENV=production
    depends_on:
      - db
    ports:
      - "20001:3000"

  # Proxy inverso con Nginx
  nginx:
    image: nginx:latest
    container_name: nginx_prod
    depends_on:
      - backend
      - frontend
    ports:
      - "20020:80"  # Nginx expone el puerto 80 para gestionar el tráfico
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public_html:/usr/share/nginx/html  # Los archivos de Vue.js se servirán a través de Nginx
